# Multi-stage Dockerfile for Viveo Frontend
# Supports both development and production modes

FROM node:18-alpine AS base

# Set working directory
WORKDIR /app

# Install serve globally and curl for health checks
RUN apk add --no-cache curl && \
    npm install -g serve

# Development stage
FROM base AS development

# Copy all application files
COPY . .

# Generate config.js for development
ARG API_BASE_URL=/viveo/api
RUN cat > config.js << EOF
// config.js - Application Configuration (Development)
const API_BASE_URL = '${API_BASE_URL}';

let currentUser = null;
let currentDate = new Date();
let foodEntries = [];
let aiChatOpen = false;

let calorieData = {
    intake: 0,
    target: 1764,
    left: 1764
};

let userProfile = {
    calorieGoal: 2000,
    proteinGoal: 150,
    carbsGoal: 250,
    fatsGoal: 65,
    age: null,
    weight: null,
    height: null,
    activityLevel: 'moderately_active'
};

const APP_SETTINGS = {
    autoSaveInterval: 30000,
    maxFoodEntries: 100,
    debugMode: true
};

const ENV_INFO = {
    environment: 'development',
    deployMode: 'dev',
    uiPath: '/viveo',
    domain: 'localhost'
};

function showMessage(message, type = 'info') {
    console.log(\`[\${type.toUpperCase()}] \${message}\`);
}

function debugLog(message, data = null) {
    if (APP_SETTINGS.debugMode) {
        console.log(\`[DEBUG] \${message}\`, data);
    }
}
EOF

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Development command - serve with hot reload capability
CMD ["serve", "-s", ".", "-l", "3000", "--cors"]

# Production stage
FROM base AS production

# Copy all application files
COPY . .

# Generate optimized config.js for production
ARG API_BASE_URL=/viveo/api
ARG DOMAIN=localhost
RUN cat > config.js << EOF
// config.js - Application Configuration (Production)
const API_BASE_URL = '${API_BASE_URL}';

let currentUser = null;
let currentDate = new Date();
let foodEntries = [];
let aiChatOpen = false;

let calorieData = {
    intake: 0,
    target: 1764,
    left: 1764
};

let userProfile = {
    calorieGoal: 2000,
    proteinGoal: 150,
    carbsGoal: 250,
    fatsGoal: 65,
    age: null,
    weight: null,
    height: null,
    activityLevel: 'moderately_active'
};

const APP_SETTINGS = {
    autoSaveInterval: 30000,
    maxFoodEntries: 100,
    debugMode: false
};

const ENV_INFO = {
    environment: 'production',
    deployMode: 'prod',
    uiPath: '/viveo',
    domain: '${DOMAIN}'
};

function showMessage(message, type = 'info') {
    if (type === 'error') {
        console.error(\`[\${type.toUpperCase()}] \${message}\`);
    }
}

function debugLog(message, data = null) {
    // Debug disabled in production
}
EOF

# Optimize for production - remove unnecessary files
RUN find . -name "*.md" -type f -delete && \
    find . -name "*.txt" -type f -delete && \
    find . -name ".git*" -type f -delete && \
    find . -name "package*.json" -type f -delete && \
    find . -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true

# Create a non-root user for production security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /app

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Production command - optimized serve with security headers
CMD ["serve", "-s", ".", "-l", "3000", "--no-clipboard", "--no-port-switching"]